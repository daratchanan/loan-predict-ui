// ============================================
// components/loan/LoanApplicationDialog.tsx
// Dialog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠
// ============================================

"use client";

import { useState } from "react";
import { api, LoanApplication } from "@/lib/api";
import { X } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

const factorMap: Array<{
  match: RegExp;
  label: string;
  pos: string;
  neg: string;
}> = [
  // ‡∏Å‡∏é/‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
  {
    match: /credit_policy/i,
    label: '‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏†‡∏≤‡∏¢‡πÉ‡∏ô',
    pos: '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
    neg: '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô/‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
  {
    match: /int_rate/i,
    label: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
    pos: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
    neg: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
  },
  // ‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î
  {
    match: /installment/i,
    label: '‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
    pos: '‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
    neg: '‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (log)
  {
    match: /log_annual_inc/i,
    label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•)',
    pos: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏™‡∏π‡∏á ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
    neg: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏ï‡πà‡∏≥ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // DTI
  {
    match: /dti/i,
    label: '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (DTI)',
    pos: 'DTI ‡∏ï‡πà‡∏≥ ‚Üí ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ‡∏î‡∏µ',
    neg: 'DTI ‡∏™‡∏π‡∏á ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏ï‡∏∂‡∏á‡∏ï‡∏±‡∏ß',
  },
  // FICO
  {
    match: /fico/i,
    label: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (FICO)',
    pos: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏™‡∏π‡∏á ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
    neg: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ï‡πà‡∏≥ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (‡∏ß‡∏±‡∏ô)
  {
    match: /days_with_cr_line/i,
    label: '‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï (‡∏ß‡∏±‡∏ô)',
    pos: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏≤‡∏ô/‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
    neg: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡∏≠‡∏™‡∏±‡πâ‡∏ô/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏Å‡∏±‡∏î',
  },
  // ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô
  {
    match: /revol_bal/i,
    label: '‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô (Revolving Balance)',
    pos: '‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≥',
    neg: '‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏™‡∏π‡∏á',
  },
  // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô
  {
    match: /revol_util/i,
    label: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô (Utilization)',
    pos: '‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏ô‡πâ‡∏≠‡∏¢',
    neg: '‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏™‡∏π‡∏á',
  },
  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  {
    match: /inq_last_6mths/i,
    label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)',
    pos: '‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ö‡πà‡∏≠‡∏¢ ‚Üí ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£',
    neg: '‡∏¢‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏ö‡πà‡∏≠‡∏¢ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î 2 ‡∏õ‡∏µ
  {
    match: /delinq_2yrs/i,
    label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î 2 ‡∏õ‡∏µ',
    pos: '‡πÑ‡∏°‡πà‡∏°‡∏µ/‡∏ô‡πâ‡∏≠‡∏¢ ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
    neg: '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢ (‡∏®‡∏≤‡∏•/‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê)
  {
    match: /pub_rec/i,
    label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢ (Public Records)',
    pos: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢',
    neg: '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢',
  },
  // (target) not_fully_paid ‚Äî ‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
  {
    match: /not_fully_paid/i,
    label: '‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö',
    pos: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏•‡∏î‡∏•‡∏á',
    neg: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô',
  },
  // ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
  {
    match: /estimated_credit_limit/i,
    label: '‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå',
    pos: '‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠/‡∏™‡∏π‡∏á',
    neg: '‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≥/‡∏à‡∏≥‡∏Å‡∏±‡∏î',
  },
  // ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
  {
    match: /installment_to_income_ratio/i,
    label: '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
    pos: '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏ï‡πà‡∏≥ ‚Üí ‡∏†‡∏≤‡∏£‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏ô‡∏±‡∏Å',
    neg: '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏™‡∏π‡∏á ‚Üí ‡∏†‡∏≤‡∏£‡∏∞‡∏ï‡∏∂‡∏á‡∏ï‡∏±‡∏ß',
  },
  // ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (feature ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á)
  {
    match: /high_interest/i,
    label: '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà',
    pos: '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
    neg: '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏™‡∏π‡∏á ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ
  {
    match: /purpose_debt_consolidation/i,
    label: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ',
    pos: '‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
    neg: '‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ ‚Äî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
  },
  // ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
  {
    match: /purpose_educational/i,
    label: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
    pos: '‡∏Å‡∏π‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
    neg: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
  },
  // ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
  {
    match: /purpose_small_business/i,
    label: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å',
    pos: '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°',
    neg: '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‚Äî ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
  },
  // ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  {
    match: /purpose_all_other/i,
    label: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ',
    pos: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
    neg: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
  },
];


const toThai = (k: string) => {
  const item = factorMap.find((f) => f.match.test(k));
  if (item) return item.label;
  return k
    .replaceAll("_", " ")
    .replace(/<=|>=|<|>|==/g, (m) => ` ${m} `)
    .trim();
};

const explain = (k: string, isPositive: boolean) => {
  const item = factorMap.find((f) => f.match.test(k));
  const text = item
    ? isPositive
      ? item.pos
      : item.neg
    : isPositive
    ? "‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
    : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á";
  const bullet = isPositive ? "üü¢" : "üî¥";
  return `${bullet} ${text}`;
};

interface LoanApplicationDialogProps {
  isOpen: boolean;
  onClose: () => void;
  token: string;
  onSuccess: () => void;
}

export function LoanApplicationDialog({
  isOpen,
  onClose,
  token,
  onSuccess,
}: LoanApplicationDialogProps) {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [formData, setFormData] = useState<LoanApplication>({
    credit_policy: 1,
    purpose: "debt_consolidation",
    int_rate: 0.12,
    installment: 500,
    log_annual_inc: 11,
    dti: 15,
    fico: 700,
    days_with_cr_line: 5000,
    revol_bal: 20000,
    revol_util: 50,
    inq_last_6mths: 0,
    delinq_2yrs: 0,
    pub_rec: 0,
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await api.submitApplication(token, formData);
      setResult(response);
    } catch (err) {
      alert(
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " +
          (err instanceof Error ? err.message : "Unknown error")
      );
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setResult(null);
    onClose();
    if (result) {
      onSuccess();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between">
          <h2 className="text-2xl font-bold text-gray-800">‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠</h2>
          <button
            onClick={handleClose}
            className="text-gray-500 hover:text-gray-700"
          >
            <X size={24} />
          </button>
        </div>

        <div className="p-6">
          {result ? (
            <div className="space-y-4">
              <div
                className={`p-6 rounded-lg ${
                  result.prediction === "‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
                    ? "bg-green-50"
                    : "bg-red-50"
                }`}
              >
                <h3 className="text-xl font-bold mb-2">
                  ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤: {result.prediction}
                </h3>
                <div className="grid grid-cols-2 gap-4 mt-4">
                  <div>
                    <p className="text-sm text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î</p>
                    <p className="text-lg font-semibold">
                      {(result.probability * 100).toFixed(2)}%
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">FICO Score</p>
                    <p className="text-lg font-semibold">{result.fico_score}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢</p>
                    <p className="text-lg font-semibold">
                      {(result.interest_rate * 100).toFixed(2)}%
                    </p>
                  </div>
                </div>
              </div>
              {/* <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold mb-2">‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:</h4>
                <div className="space-y-1">
                  {Object.entries(result.explanation).map(([key, value]) => (
                    <div key={key} className="flex justify-between text-sm">
                      <span>{key}</span>
                      <span className={Number(value) > 0 ? 'text-green-600' : 'text-red-600'}>
                        {Number(value).toFixed(3)}
                      </span>
                    </div>
                  ))}
                </div>
              </div> */}
              {/* <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold mb-2">‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à:</h4>
                <div className="space-y-2">
                  {Object.entries(result.explanation).map(([key, value]) => {
                    const num = Number(value);
                    const isPos = num > 0;
                    return (
                      <div key={key} className="text-sm">
                        <div className="flex justify-between">
                          <span>{toThai(String(key))}</span>
                          <span className={isPos ? 'text-green-600' : 'text-red-600'}>
                            {num.toFixed(3)}
                          </span>
                        </div>
                        <div className="text-xs text-gray-500 mt-0.5">
                          {explain(String(key), isPos)}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div> */}
              {/* --- ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å JSX ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) --- */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold mb-3">
                  ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
                </h4>

                {(() => {
                  const items = Object.entries(result.explanation).map(
                    ([key, value]) => {
                      const num = Number(value);
                      const isPos = num > 0;
                      return {
                        key,
                        isPos,
                        label: toThai(String(key)),
                        desc: explain(String(key), isPos),
                      };
                    }
                  );

                  const positives = items.filter((i) => i.isPos);
                  const negatives = items.filter((i) => !i.isPos);

                  return (
                    <div className="grid gap-4 md:grid-cols-2">
                      {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô */}
                      <section className="rounded-md border border-green-200 bg-green-50 p-3">
                        <div className="mb-2 flex items-center gap-2">
                          <div className="h-2 w-2 rounded-full bg-green-500" />
                          <span className="text-sm font-medium text-green-800">
                            ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô (‡∏ä‡πà‡∏ß‡∏¢‡∏ú‡πà‡∏≤‡∏ô)
                          </span>
                        </div>
                        <ul className="space-y-2">
                          {positives.length > 0 ? (
                            positives.map((f) => (
                              <li
                                key={f.key}
                                className="flex items-start gap-2"
                              >
                                <span className="leading-5">üü¢</span>
                                <div>
                                  <div className="text-sm font-medium">
                                    {f.label}
                                  </div>
                                  <div className="text-xs text-gray-600">
                                    {f.desc.replace(/^üü¢ |^üî¥ /, "")}
                                  </div>
                                </div>
                              </li>
                            ))
                          ) : (
                            <li className="text-xs text-gray-500">
                              ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô ‚Äî
                            </li>
                          )}
                        </ul>
                      </section>

                      {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á */}
                      <section className="rounded-md border border-red-200 bg-red-50 p-3">
                        <div className="mb-2 flex items-center gap-2">
                          <div className="h-2 w-2 rounded-full bg-red-500" />
                          <span className="text-sm font-medium text-red-800">
                            ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)
                          </span>
                        </div>
                        <ul className="space-y-2">
                          {negatives.length > 0 ? (
                            negatives.map((f) => (
                              <li
                                key={f.key}
                                className="flex items-start gap-2"
                              >
                                <span className="leading-5">üî¥</span>
                                <div>
                                  <div className="text-sm font-medium">
                                    {f.label}
                                  </div>
                                  <div className="text-xs text-gray-600">
                                    {f.desc.replace(/^üü¢ |^üî¥ /, "")}
                                  </div>
                                </div>
                              </li>
                            ))
                          ) : (
                            <li className="text-xs text-gray-500">
                              ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‚Äî
                            </li>
                          )}
                        </ul>
                      </section>
                    </div>
                  );
                })()}

                <p className="mt-3 text-[11px] text-gray-500">
                  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤
                  ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                </p>
              </div>

              <button
                onClick={handleClose}
                className="w-full bg-[#ff9933] text-white py-2 rounded-lg font-medium hover:bg-[#e68a2e]"
              >
                ‡∏õ‡∏¥‡∏î
              </button>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠
                    <span className="block text-xs text-gray-500 font-normal">
                      (Credit Policy)
                    </span>
                  </label>
                  <select
                    value={formData.credit_policy}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        credit_policy: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  >
                    <option value={1}>‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå</option>
                    <option value={0}>‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ
                    <span className="block text-xs text-gray-500 font-normal">
                      (Purpose)
                    </span>
                  </label>
                  <select
                    value={formData.purpose}
                    onChange={(e) =>
                      setFormData({ ...formData, purpose: e.target.value })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  >
                    <option value="debt_consolidation">‡∏£‡∏ß‡∏°‡∏´‡∏ô‡∏µ‡πâ</option>
                    <option value="small_business">‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å</option>
                    <option value="educational">‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
                    <option value="all_other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ
                    <span className="block text-xs text-gray-500 font-normal">
                      (Interest Rate)
                    </span>
                  </label>
                  <input
                    type="number"
                    step="0.0001"
                    value={formData.int_rate}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        int_rate: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                    <span className="block text-xs text-gray-500 font-normal">
                      (Installment)
                    </span>
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={formData.installment}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        installment: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏õ‡∏µ
                    <span className="block text-xs text-gray-500 font-normal">
                      (Log Annual Income)
                    </span>
                  </label>
                  <input
                    type="number"
                    step="0.0001"
                    value={formData.log_annual_inc}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        log_annual_inc: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
                    <span className="block text-xs text-gray-500 font-normal">
                      (Debt-to-Income Ratio)
                    </span>
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={formData.dti}
                    onChange={(e) =>
                      setFormData({ ...formData, dti: Number(e.target.value) })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï FICO
                    <span className="block text-xs text-gray-500 font-normal">
                      (FICO Score)
                    </span>
                  </label>
                  <input
                    type="number"
                    value={formData.fico}
                    onChange={(e) =>
                      setFormData({ ...formData, fico: Number(e.target.value) })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                    <span className="block text-xs text-gray-500 font-normal">
                      (Days with Credit Line)
                    </span>
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={formData.days_with_cr_line}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        days_with_cr_line: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô
                    <span className="block text-xs text-gray-500 font-normal">
                      (Revolving Balance)
                    </span>
                  </label>
                  <input
                    type="number"
                    value={formData.revol_bal}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        revol_bal: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                    <span className="block text-xs text-gray-500 font-normal">
                      (Revolving Utilization)
                    </span>
                  </label>
                  <input
                    type="number"
                    step="0.1"
                    value={formData.revol_util}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        revol_util: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
                    <span className="block text-xs text-gray-500 font-normal">
                      (Inquiries Last 6 Months)
                    </span>
                  </label>
                  <input
                    type="number"
                    value={formData.inq_last_6mths}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        inq_last_6mths: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î (2 ‡∏õ‡∏µ)
                    <span className="block text-xs text-gray-500 font-normal">
                      (Delinquencies 2 Years)
                    </span>
                  </label>
                  <input
                    type="number"
                    value={formData.delinq_2yrs}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        delinq_2yrs: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
                    <span className="block text-xs text-gray-500 font-normal">
                      (Public Records)
                    </span>
                  </label>
                  <input
                    type="number"
                    value={formData.pub_rec}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        pub_rec: Number(e.target.value),
                      })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ff9933] outline-none"
                  />
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  type="button"
                  onClick={handleClose}
                  className="flex-1 bg-gray-200 text-gray-700 py-2 rounded-lg font-medium hover:bg-gray-300"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="flex-1 bg-[#ff9933] text-white py-2 rounded-lg font-medium hover:bg-[#e68a2e] disabled:opacity-50"
                >
                  {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..." : "‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£"}
                </button>
              </div>
            </form>
          )}
        </div>
      </div>
    </div>
  );
}
